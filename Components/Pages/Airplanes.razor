@page "/airplanes"
@inject NavigationManager NavigationManager
@inject IAirplaneService AirplaneService
@inject IWarehouseService WarehouseService
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Airplanes</PageTitle>
<h1>Airplanes</h1>

@if (airplanes.Count == 0)
{
    <p><em>No airplanes found.</em></p>
}
else
{
    <table class="table">
        <thead>
        <th>Code</th>
        <th>Max Load (kg)</th>
        <th>Current Load (kg)</th>
        <th>City</th>
        <th>Warehouse Code</th>
        <th>Edit Airplane</th>
        <th>Delete Airplane</th>
        </thead>
        <tbody>
        @foreach (var airplane in airplanes)
        {
            <tr>
                <td>@airplane.AirplaneCode</td>
                <td>@airplane.MaxLoad</td>
                <td>@airplane.CurrentLoad</td>
                <td>
                    @(warehouses.TryGetValue(airplane.WarehouseId ?? 0, out var warehouse1)
                        ? warehouse1.Location
                        : "No Warehouse")
                </td>
                <td>
                    @(warehouses.TryGetValue(airplane.WarehouseId ?? 0, out var warehouse2)
                        ? warehouse2.Code
                        : "No Warehouse")
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="() => EditAirplane(airplane.AirplaneId)">Edit</button>
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(airplane.AirplaneId)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="AddAirplane">Add a New Airplane</button>
}

<!-- Modal -->
<div class="modal fade show" tabindex="-1" role="dialog" style="display: @(isDeleteModalVisible ? "block" : "none");">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" @onclick="HideDeleteConfirmation" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this airplane?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" @onclick="HideDeleteConfirmation">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteAirplane">Delete</button>
            </div>
        </div>
    </div>
</div>


@code {
    List<Airplane> airplanes = new List<Airplane>();
    Dictionary<int, (string Code, string Location)> warehouses = new();
    bool isDeleteModalVisible = false;
    int airplaneIdToDelete = 0;

    protected override async Task OnInitializedAsync()
    {
        airplanes = await AirplaneService.GetAllAirplanesAsync();
        var warehouseList = await WarehouseService.GetAllWarehousesAsync();
        warehouses = warehouseList.ToDictionary(
            w => w.WarehouseId, 
            w => (w.WarehouseCode, w.Location)
        );
    }

    void EditAirplane(int id)
    {
        NavigationManager.NavigateTo($"/edit-airplane/{id}");
    }

    void AddAirplane()
    {
        NavigationManager.NavigateTo($"/edit-airplane");
    }

    void ShowDeleteConfirmation(int id)
    {
        isDeleteModalVisible = true;
        airplaneIdToDelete = id;
    }

    void HideDeleteConfirmation()
    {
        isDeleteModalVisible = false;
        airplaneIdToDelete = 0;
    }

    async Task ConfirmDeleteAirplane()
    {
        if (airplaneIdToDelete != 0)
        {
            await AirplaneService.DeleteAirplaneAsync(airplaneIdToDelete);
            airplanes = await AirplaneService.GetAllAirplanesAsync();
        }
        HideDeleteConfirmation();
    }
}
